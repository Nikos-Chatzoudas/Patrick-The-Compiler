%{
/* Header section - include necessary files */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>  /* For strdup() */
#include "parser.tab.h"  /* Generated by Bison */

/* External declaration for parser's yylval */
extern YYSTYPE yylval;
%}

/* Flex options */
%option yylineno
%option noinput
%option nounput

/* Rules section - pattern matching rules */
%%

    /* Keywords */
"int"       { return INT; }          /* Match 'int' keyword */
"float"     { return FLOAT; }        /* Match 'float' keyword */
"char"      { return CHAR; }         /* Match 'char' keyword */
"print"     { return PRINT; }        /* Match 'print' keyword */

    /* Operators */
"+"         { return PLUS; }         /* Match addition operator */
"-"         { return MINUS; }        /* Match subtraction operator */
"*"         { return MULTIPLY; }     /* Match multiplication operator */
"/"         { return DEVIDE; }       /* Match division operator */
"="         { return ASSIGN; }       /* Match assignment operator */

    /* Punctuation */
";"         { return SEMICOLON; }    /* Match semicolon */
"("         { return LPAREN; }       /* Match left parenthesis */
")"         { return RPAREN; }       /* Match right parenthesis */
"{"         { return LCURLY; }       /* Match left curly brace */
"}"         { return RCURLY; }       /* Match right curly brace */

    /* Floating point numbers: match digits.digits or .digits */
[0-9]+\.[0-9]+ |
\.[0-9]+        {
    yylval.float_val = atof(yytext); /* Convert text to double and store in yylval */
    return FLOAT_NUMBER;
}

    /* Integer numbers: match one or more digits */
[0-9]+      {
    yylval.int_val = atoi(yytext); /* Convert text to integer and store in yylval */
    return INT_NUMBER;
}

    /* Character literals: match a single character enclosed in single quotes */
\'[^']\' {
    yylval.char_val = yytext[1];  /* Extract the character, ignoring the quotes */
    return CHAR_LITERAL;
}

    /* String literals: match text inside double quotes */
\"[^\"]*\" {
    yylval.str_val = strdup(yytext + 1);  /* Copy the string without quotes into yylval */
    yylval.str_val[strlen(yylval.str_val) - 1] = '\0';  /* Remove the closing quote */
    return STRING_LITERAL;
}

    /* Catch invalid character literals (e.g., too many characters) */
\'[^\']*\' {
    printf("Error: Invalid character literal %s\n", yytext);
}

    /* Identifiers: start with letter/underscore, followed by letters/numbers/underscores */
[a-zA-Z_][a-zA-Z0-9_]* {
    yylval.id = strdup(yytext);  /* Allocate memory and copy identifier name */
    return IDENTIFIER;
}

    /* Whitespace: ignore spaces, tabs, and newlines */
[ \t\n]+    { /* Skip whitespace */ }

    /* Comments: ignore everything after // until the end of the line */
"//".*      { /* Skip comments */ }

    /* Catch any other character as an error */
.           {
    printf("Unexpected character: %s\n", yytext);
}

%%

/* C code section */

/* Required by flex - called when input is exhausted */
int yywrap() {
    return 1;  /* Return 1 to indicate no more input */
}
